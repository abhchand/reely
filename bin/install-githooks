#!/usr/bin/env ruby

#
# Git hooks are located in .git/hooks, which is outside of version control
#
# This installer adds hooks to that location (prompting to override if
# necessary). The hooks in turn call scripts that live within this repo
#

githooks_dir = File.expand_path("../../.git/hooks", __FILE__)


# Pre-commit hooks

precommit_file = githooks_dir + "/pre-commit"

if File.exist?(precommit_file)
  printf "\033[33mFile #{precommit_file} exists.\nOverride? (Y/N) "
  prompt = STDIN.gets.chomp
  exit unless prompt.downcase == 'y'
end

File.open(precommit_file, "w") do |file|
  file.write(
    # rubocop:disable LineLength
    <<-BLOCK
#!/usr/bin/env ruby

#
# Auto generated by file #{File.basename(__FILE__)}
#

# Run the appropriate file in the githooks directory, returning whatever exit
# code that file itself returns
# Anything other than 0 will stop git from executing further

require_relative File.expand_path("../../../contrib/git/hooks/pre_commit.rb", __FILE__)

exit Git::Hooks::PreCommit.run

    BLOCK
    # rubocop:enable LineLength
  )
end

# Make the file executable
system("chmod +x #{precommit_file}")

puts "Succesfully installed git hooks"
